@page "/placeorder"
@inject NavigationManager navigationManager
@inject IViewShoppingCartUseCase viewShoppingCartUseCase
@inject IPlaceOrderUseCase placeOrderUseCase
<h3>Place Order</h3>
<br />

@if(order != null)
{
    <div class="row">
        <div class="col">
            <CustomerFormComponent OnCustomerInfoSubmitted="HandleCustomerInfoSubmit"></CustomerFormComponent>
        </div>
        <div class="col">
            <OrderSummaryComponent Order="order" HidePlaceOrderButton=true></OrderSummaryComponent>
        </div>
    </div>
}
@code {
    private Order order;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            order = await viewShoppingCartUseCase.Execute();
            StateHasChanged();
        }

    }
    private async void HandleCustomerInfoSubmit(CustomerViewModel customerView)
    {
        var mapper = new AutoMapper.MapperConfiguration(cfg => cfg.CreateMap<CustomerViewModel, Order>()).CreateMapper();
        mapper.Map<CustomerViewModel, Order>(customerView, order);

        var orderUniqueId= await placeOrderUseCase.Execute(order);

        if(string.IsNullOrEmpty(orderUniqueId))
        {
            //Display error
        }
        else
        {
            navigationManager.NavigateTo($"/orderconfirm/{orderUniqueId}"); 
        }
    }
}
